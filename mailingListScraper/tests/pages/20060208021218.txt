Date: 1138788975 -0500<br>
<br>
Signed-off-by: Al Viro &lt;viro@xxxxxxxxxxxxxxxxxx&gt;<br>
<br>
---<br>
<br>
 arch/s390/kernel/compat_linux.c |   83 ++++++++++++++++++++-------------------<br>
 1 files changed, 42 insertions(+), 41 deletions(-)<br>
<br>
24954a1418298058399581d6fcc4d46e928e1bf5<br>
diff --git a/arch/s390/kernel/compat_linux.c b/arch/s390/kernel/compat_linux.c<br>
index bf9a7a3..cc20f0e 100644<br>
--- a/arch/s390/kernel/compat_linux.c<br>
+++ b/arch/s390/kernel/compat_linux.c<br>
@@ -100,12 +100,12 @@<br>
 #define SET_STAT_UID(stat, uid)		(stat).st_uid = high2lowuid(uid)<br>
 #define SET_STAT_GID(stat, gid)		(stat).st_gid = high2lowgid(gid)<br>
 <br>
-asmlinkage long sys32_chown16(const char * filename, u16 user, u16 group)<br>
+asmlinkage long sys32_chown16(const char __user * filename, u16 user, u16 group)<br>
 {<br>
 	return sys_chown(filename, low2highuid(user), low2highgid(group));<br>
 }<br>
 <br>
-asmlinkage long sys32_lchown16(const char * filename, u16 user, u16 group)<br>
+asmlinkage long sys32_lchown16(const char __user * filename, u16 user, u16 group)<br>
 {<br>
 	return sys_lchown(filename, low2highuid(user), low2highgid(group));<br>
 }<br>
@@ -141,7 +141,7 @@ asmlinkage long sys32_setresuid16(u16 ru<br>
 		low2highuid(suid));<br>
 }<br>
 <br>
-asmlinkage long sys32_getresuid16(u16 *ruid, u16 *euid, u16 *suid)<br>
+asmlinkage long sys32_getresuid16(u16 __user *ruid, u16 __user *euid, u16 __user *suid)<br>
 {<br>
 	int retval;<br>
 <br>
@@ -158,7 +158,7 @@ asmlinkage long sys32_setresgid16(u16 rg<br>
 		low2highgid(sgid));<br>
 }<br>
 <br>
-asmlinkage long sys32_getresgid16(u16 *rgid, u16 *egid, u16 *sgid)<br>
+asmlinkage long sys32_getresgid16(u16 __user *rgid, u16 __user *egid, u16 __user *sgid)<br>
 {<br>
 	int retval;<br>
 <br>
@@ -179,7 +179,7 @@ asmlinkage long sys32_setfsgid16(u16 gid<br>
 	return sys_setfsgid((gid_t)gid);<br>
 }<br>
 <br>
-static int groups16_to_user(u16 *grouplist, struct group_info *group_info)<br>
+static int groups16_to_user(u16 __user *grouplist, struct group_info *group_info)<br>
 {<br>
 	int i;<br>
 	u16 group;<br>
@@ -193,7 +193,7 @@ static int groups16_to_user(u16 *groupli<br>
 	return 0;<br>
 }<br>
 <br>
-static int groups16_from_user(struct group_info *group_info, u16 *grouplist)<br>
+static int groups16_from_user(struct group_info *group_info, u16 __user *grouplist)<br>
 {<br>
 	int i;<br>
 	u16 group;<br>
@@ -207,7 +207,7 @@ static int groups16_from_user(struct gro<br>
 	return 0;<br>
 }<br>
 <br>
-asmlinkage long sys32_getgroups16(int gidsetsize, u16 *grouplist)<br>
+asmlinkage long sys32_getgroups16(int gidsetsize, u16 __user *grouplist)<br>
 {<br>
 	int i;<br>
 <br>
@@ -231,7 +231,7 @@ out:<br>
 	return i;<br>
 }<br>
 <br>
-asmlinkage long sys32_setgroups16(int gidsetsize, u16 *grouplist)<br>
+asmlinkage long sys32_setgroups16(int gidsetsize, u16 __user *grouplist)<br>
 {<br>
 	struct group_info *group_info;<br>
 	int retval;<br>
@@ -278,14 +278,14 @@ asmlinkage long sys32_getegid16(void)<br>
 <br>
 /* 32-bit timeval and related flotsam.  */<br>
 <br>
-static inline long get_tv32(struct timeval *o, struct compat_timeval *i)<br>
+static inline long get_tv32(struct timeval *o, struct compat_timeval __user *i)<br>
 {<br>
 	return (!access_ok(VERIFY_READ, o, sizeof(*o)) ||<br>
 		(__get_user(o-&gt;tv_sec, &amp;i-&gt;tv_sec) ||<br>
 		 __get_user(o-&gt;tv_usec, &amp;i-&gt;tv_usec)));<br>
 }<br>
 <br>
-static inline long put_tv32(struct compat_timeval *o, struct timeval *i)<br>
+static inline long put_tv32(struct compat_timeval __user *o, struct timeval *i)<br>
 {<br>
 	return (!access_ok(VERIFY_WRITE, o, sizeof(*o)) ||<br>
 		(__put_user(i-&gt;tv_sec, &amp;o-&gt;tv_sec) ||<br>
@@ -341,7 +341,7 @@ asmlinkage long sys32_ipc(u32 call, int <br>
 	return -ENOSYS;<br>
 }<br>
 <br>
-asmlinkage long sys32_truncate64(const char * path, unsigned long high, unsigned long low)<br>
+asmlinkage long sys32_truncate64(const char __user * path, unsigned long high, unsigned long low)<br>
 {<br>
 	if ((int)high &lt; 0)<br>
 		return -EINVAL;<br>
@@ -357,7 +357,7 @@ asmlinkage long sys32_ftruncate64(unsign<br>
 		return sys_ftruncate(fd, (high &lt;&lt; 32) | low);<br>
 }<br>
 <br>
-int cp_compat_stat(struct kstat *stat, struct compat_stat *statbuf)<br>
+int cp_compat_stat(struct kstat *stat, struct compat_stat __user *statbuf)<br>
 {<br>
 	int err;<br>
 <br>
@@ -591,7 +591,7 @@ sys32_delete_module(const char __user *n<br>
 <br>
 extern struct timezone sys_tz;<br>
 <br>
-asmlinkage long sys32_gettimeofday(struct compat_timeval *tv, struct timezone *tz)<br>
+asmlinkage long sys32_gettimeofday(struct compat_timeval __user *tv, struct timezone __user *tz)<br>
 {<br>
 	if (tv) {<br>
 		struct timeval ktv;<br>
@@ -606,7 +606,7 @@ asmlinkage long sys32_gettimeofday(struc<br>
 	return 0;<br>
 }<br>
 <br>
-static inline long get_ts32(struct timespec *o, struct compat_timeval *i)<br>
+static inline long get_ts32(struct timespec *o, struct compat_timeval __user *i)<br>
 {<br>
 	long usec;<br>
 <br>
@@ -620,7 +620,7 @@ static inline long get_ts32(struct times<br>
 	return 0;<br>
 }<br>
 <br>
-asmlinkage long sys32_settimeofday(struct compat_timeval *tv, struct timezone *tz)<br>
+asmlinkage long sys32_settimeofday(struct compat_timeval __user *tv, struct timezone __user *tz)<br>
 {<br>
 	struct timespec kts;<br>
 	struct timezone ktz;<br>
@@ -645,7 +645,7 @@ asmlinkage long sys32_pause(void)<br>
 	return -ERESTARTNOHAND;<br>
 }<br>
 <br>
-asmlinkage long sys32_pread64(unsigned int fd, char *ubuf,<br>
+asmlinkage long sys32_pread64(unsigned int fd, char __user *ubuf,<br>
 				size_t count, u32 poshi, u32 poslo)<br>
 {<br>
 	if ((compat_ssize_t) count &lt; 0)<br>
@@ -653,7 +653,7 @@ asmlinkage long sys32_pread64(unsigned i<br>
 	return sys_pread64(fd, ubuf, count, ((loff_t)AA(poshi) &lt;&lt; 32) | AA(poslo));<br>
 }<br>
 <br>
-asmlinkage long sys32_pwrite64(unsigned int fd, const char *ubuf,<br>
+asmlinkage long sys32_pwrite64(unsigned int fd, const char __user *ubuf,<br>
 				size_t count, u32 poshi, u32 poslo)<br>
 {<br>
 	if ((compat_ssize_t) count &lt; 0)<br>
@@ -666,7 +666,7 @@ asmlinkage compat_ssize_t sys32_readahea<br>
 	return sys_readahead(fd, ((loff_t)AA(offhi) &lt;&lt; 32) | AA(offlo), count);<br>
 }<br>
 <br>
-asmlinkage long sys32_sendfile(int out_fd, int in_fd, compat_off_t *offset, size_t count)<br>
+asmlinkage long sys32_sendfile(int out_fd, int in_fd, compat_off_t __user *offset, size_t count)<br>
 {<br>
 	mm_segment_t old_fs = get_fs();<br>
 	int ret;<br>
@@ -686,7 +686,7 @@ asmlinkage long sys32_sendfile(int out_f<br>
 }<br>
 <br>
 asmlinkage long sys32_sendfile64(int out_fd, int in_fd,<br>
-				compat_loff_t *offset, s32 count)<br>
+				compat_loff_t __user *offset, s32 count)<br>
 {<br>
 	mm_segment_t old_fs = get_fs();<br>
 	int ret;<br>
@@ -722,7 +722,7 @@ struct timex32 {<br>
 <br>
 extern int do_adjtimex(struct timex *);<br>
 <br>
-asmlinkage long sys32_adjtimex(struct timex32 *utp)<br>
+asmlinkage long sys32_adjtimex(struct timex32 __user *utp)<br>
 {<br>
 	struct timex txc;<br>
 	int ret;<br>
@@ -789,12 +789,13 @@ struct __sysctl_args32 {<br>
 	u32 __unused[4];<br>
 };<br>
 <br>
-asmlinkage long sys32_sysctl(struct __sysctl_args32 *args)<br>
+asmlinkage long sys32_sysctl(struct __sysctl_args32 __user *args)<br>
 {<br>
 	struct __sysctl_args32 tmp;<br>
 	int error;<br>
-	size_t oldlen, *oldlenp = NULL;<br>
-	unsigned long addr = (((long)&amp;args-&gt;__unused[0]) + 7) &amp; ~7;<br>
+	size_t oldlen;<br>
+	size_t __user *oldlenp = NULL;<br>
+	unsigned long addr = (((unsigned long)&amp;args-&gt;__unused[0]) + 7) &amp; ~7;<br>
 <br>
 	if (copy_from_user(&amp;tmp, args, sizeof(tmp)))<br>
 		return -EFAULT;<br>
@@ -806,20 +807,20 @@ asmlinkage long sys32_sysctl(struct __sy<br>
 		   basically copy the whole sysctl.c here, and<br>
 		   glibc's __sysctl uses rw memory for the structure<br>
 		   anyway.  */<br>
-		if (get_user(oldlen, (u32 *)A(tmp.oldlenp)) ||<br>
-		    put_user(oldlen, (size_t *)addr))<br>
+		if (get_user(oldlen, (u32 __user *)compat_ptr(tmp.oldlenp)) ||<br>
+		    put_user(oldlen, (size_t __user *)addr))<br>
 			return -EFAULT;<br>
-		oldlenp = (size_t *)addr;<br>
+		oldlenp = (size_t __user *)addr;<br>
 	}<br>
 <br>
 	lock_kernel();<br>
-	error = do_sysctl((int *)A(tmp.name), tmp.nlen, (void *)A(tmp.oldval),<br>
-			  oldlenp, (void *)A(tmp.newval), tmp.newlen);<br>
+	error = do_sysctl(compat_ptr(tmp.name), tmp.nlen, compat_ptr(tmp.oldval),<br>
+			  oldlenp, compat_ptr(tmp.newval), tmp.newlen);<br>
 	unlock_kernel();<br>
 	if (oldlenp) {<br>
 		if (!error) {<br>
-			if (get_user(oldlen, (size_t *)addr) ||<br>
-			    put_user(oldlen, (u32 *)A(tmp.oldlenp)))<br>
+			if (get_user(oldlen, (size_t __user *)addr) ||<br>
+			    put_user(oldlen, (u32 __user *)compat_ptr(tmp.oldlenp)))<br>
 				error = -EFAULT;<br>
 		}<br>
 		copy_to_user(args-&gt;__unused, tmp.__unused, sizeof(tmp.__unused));<br>
@@ -853,7 +854,7 @@ struct stat64_emu31 {<br>
 	unsigned long   st_ino;<br>
 };	<br>
 <br>
-static int cp_stat64(struct stat64_emu31 *ubuf, struct kstat *stat)<br>
+static int cp_stat64(struct stat64_emu31 __user *ubuf, struct kstat *stat)<br>
 {<br>
 	struct stat64_emu31 tmp;<br>
 <br>
@@ -877,7 +878,7 @@ static int cp_stat64(struct stat64_emu31<br>
 	return copy_to_user(ubuf,&amp;tmp,sizeof(tmp)) ? -EFAULT : 0; <br>
 }<br>
 <br>
-asmlinkage long sys32_stat64(char * filename, struct stat64_emu31 * statbuf)<br>
+asmlinkage long sys32_stat64(char __user * filename, struct stat64_emu31 __user * statbuf)<br>
 {<br>
 	struct kstat stat;<br>
 	int ret = vfs_stat(filename, &amp;stat);<br>
@@ -886,7 +887,7 @@ asmlinkage long sys32_stat64(char * file<br>
 	return ret;<br>
 }<br>
 <br>
-asmlinkage long sys32_lstat64(char * filename, struct stat64_emu31 * statbuf)<br>
+asmlinkage long sys32_lstat64(char __user * filename, struct stat64_emu31 __user * statbuf)<br>
 {<br>
 	struct kstat stat;<br>
 	int ret = vfs_lstat(filename, &amp;stat);<br>
@@ -895,7 +896,7 @@ asmlinkage long sys32_lstat64(char * fil<br>
 	return ret;<br>
 }<br>
 <br>
-asmlinkage long sys32_fstat64(unsigned long fd, struct stat64_emu31 * statbuf)<br>
+asmlinkage long sys32_fstat64(unsigned long fd, struct stat64_emu31 __user * statbuf)<br>
 {<br>
 	struct kstat stat;<br>
 	int ret = vfs_fstat(fd, &amp;stat);<br>
@@ -952,7 +953,7 @@ out:    <br>
 <br>
 <br>
 asmlinkage unsigned long<br>
-old32_mmap(struct mmap_arg_struct_emu31 *arg)<br>
+old32_mmap(struct mmap_arg_struct_emu31 __user *arg)<br>
 {<br>
 	struct mmap_arg_struct_emu31 a;<br>
 	int error = -EFAULT;<br>
@@ -970,7 +971,7 @@ out:<br>
 }<br>
 <br>
 asmlinkage long <br>
-sys32_mmap2(struct mmap_arg_struct_emu31 *arg)<br>
+sys32_mmap2(struct mmap_arg_struct_emu31 __user *arg)<br>
 {<br>
 	struct mmap_arg_struct_emu31 a;<br>
 	int error = -EFAULT;<br>
@@ -982,7 +983,7 @@ out:<br>
 	return error;<br>
 }<br>
 <br>
-asmlinkage long sys32_read(unsigned int fd, char * buf, size_t count)<br>
+asmlinkage long sys32_read(unsigned int fd, char __user * buf, size_t count)<br>
 {<br>
 	if ((compat_ssize_t) count &lt; 0)<br>
 		return -EINVAL; <br>
@@ -990,7 +991,7 @@ asmlinkage long sys32_read(unsigned int <br>
 	return sys_read(fd, buf, count);<br>
 }<br>
 <br>
-asmlinkage long sys32_write(unsigned int fd, char * buf, size_t count)<br>
+asmlinkage long sys32_write(unsigned int fd, char __user * buf, size_t count)<br>
 {<br>
 	if ((compat_ssize_t) count &lt; 0)<br>
 		return -EINVAL; <br>
@@ -1002,12 +1003,12 @@ asmlinkage long sys32_clone(struct pt_re<br>
 {<br>
         unsigned long clone_flags;<br>
         unsigned long newsp;<br>
-	int *parent_tidptr, *child_tidptr;<br>
+	int __user *parent_tidptr, *child_tidptr;<br>
 <br>
         clone_flags = regs.gprs[3] &amp; 0xffffffffUL;<br>
         newsp = regs.orig_gpr2 &amp; 0x7fffffffUL;<br>
-	parent_tidptr = (int *) (regs.gprs[4] &amp; 0x7fffffffUL);<br>
-	child_tidptr = (int *) (regs.gprs[5] &amp; 0x7fffffffUL);<br>
+	parent_tidptr = compat_ptr(regs.gprs[4]);<br>
+	child_tidptr = compat_ptr(regs.gprs[5]);<br>
         if (!newsp)<br>
                 newsp = regs.gprs[15];<br>
         return do_fork(clone_flags, newsp, &amp;regs, 0,<br>
-- <br>
0.99.9.GIT<br>
<br>
-<br>
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in<br>
the body of a message to majordomo@xxxxxxxxxxxxxxx<br>
More majordomo info at  <a  href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br>
Please read the FAQ at  <a  href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br>
<br>
<br>

